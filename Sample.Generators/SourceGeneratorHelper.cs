using System.Collections.Generic;
using System.Linq;
using System.Reflection;
using System.Text;

namespace Sample.Generators;

public static class SourceGeneratorHelper
{
    private static string GeneratedAttribute()
    {
        return $"[global::System.CodeDom.Compiler.GeneratedCodeAttribute(\"Sample.Generators\", \"1.0.0.0\")]";
    }


    public static string Attribute = $@"
namespace Sample.Generator;

[System.AttributeUsage(System.AttributeTargets.Class)]
public class GenerateServiceAttribute: System.Attribute
{{

}}";
    

    public static string CreateService(string classNamespace, string classAssembly, string className) 
    {
        return $@"using {classNamespace};
namespace {classAssembly}.Services; 

public partial class {className}Service
{{
    private static readonly List<{className}> _list = new();
    public virtual List<{className}> All()
    {{
        return _list;
    }}

    public virtual void Add({className} item)
    {{
        _list.Add(item);
    }}

    public virtual void Update({className} item)
    {{
        var existing = _list.Single(x => x.Id == item.Id);
        _list.Remove(existing);
        _list.Add(item);
    }}

    public virtual void Delete(int id)
    {{
        var existing = _list.Single(x => x.Id == id);
        _list.Remove(existing);
    }}
}}";
    }

    
    internal static string CreateIocScopes(string classNamespace, string classAssembly, string className, IEnumerable<IocScope> scopes)
    {
        var scopesSb = new StringBuilder();
        foreach (var scope in scopes) {
            scopesSb.AppendLine($"        services.AddScoped<{scope.InterfaceName}, {scope.ClassName}>();");
        }

        var nameSpacesSb = new StringBuilder();
        var spaces = scopes.Select(x => x.NamespaceName)
            .Distinct()
            .OrderBy(x => x)
            .ToList();
        foreach (var ns in spaces)
        {
            nameSpacesSb.AppendLine($"using {ns};");
        }

        var generatedAttr = GeneratedAttribute();

        return $@"// <auto-generated />
{nameSpacesSb.ToString()}

namespace {classAssembly}.StartUp; 

{generatedAttr}
public static class {className}
{{
    public static void AddClassScopes(IServiceCollection services) 
    {{
{scopesSb.ToString()}    
    }}
}}";

    }


}

internal record IocScope
{
    internal string ClassName {get;set;} = null!;
    internal string InterfaceName {get;set;} = null!;
    internal string NamespaceName {get;set;} = null!;
}